#include<stdio.h>
#include<stdlib.h>

typedef struct node
{
    int data;
    struct node *left , *right;
}node;

 typedef struct head
 {
     node* root;

 }head;

 node* father(head *t,node *p)
 {
     node *q;
     if(p==t->root)
     return NULL;
     q=t->root;
     while(q!=NULL)
     {
         if(q->left==p||q->right==p)
            return q;
         if(p->data <= q->data)
            q=q->left;
         else q=q->right;
     }
        return NULL;
 }

 node* findmax(node *r)
 {
     if(r->right==NULL)
        return r;
     else return(findmax(r->right));
 }

 int search(head*t, int ele)
 {
     node*q=t->root;
     while(q!=NULL)
     {
         if(ele==q->data)
            return 1;
         if(ele<q->data)
            q=q->left;
         else q=q->right;

     }
     return 0;
 }
 void insert(head *t,int ele)
 {
     node *p,*q;
     p=(node*)malloc(sizeof(node));
     p->data=ele;
     p->left=p->right= NULL ;
     if(t->root==NULL)
      {
           t->root=p;
        return;
      }
     q=t->root;
     while(q!=NULL)
     {
         if(ele <= q->data)
         {
             if(q->left==NULL)
             {
                 q->left=p;
                 return;
             }
             else q=q->left;
         }
         else
         {
             if(q->right==NULL)
             {
                 q->right=p;
                 return;
             }
             else q=q->right;
         }
        }
 }

  void delete1(head *t,int ele)
  {
      node*q , *f;
      if(t->root==NULL)
      {
          printf("Binary search tree empty\n");
          return;
      }
      q=t->root;
      while(q!=NULL)
      {
          if(ele==q->data)
            break;
          if(ele<q->data)
            q=q->left;
          else  q=q->right;
      }
      if(q==NULL)
      {
          printf("%d is not found\n",ele);
          return;
      }

    if(q->left==NULL&& q->right==NULL)
    {
      if(q==t->root)
      {
          t->root= NULL;
          return;
      }
      f = father(t,q);
      if(f->left==q)
        f->left=NULL;
      else f->right=NULL;
      return;
    }

  if(q->left!=NULL)
    {
      int val;
      node *max=findmax(q->left);
      val= max->data;
      delete1(t,val);
      q->data =val;
      return;
    }

  if(q==t->root)
    {
      t->root=t->root->right;
      return;
    }
    f=father(t,q);
    if(f->left==q)
    f->left=q->right;
    else f->right=q->right;

}

void inorder(node *x)
{
    if(x!=NULL)
    {
        inorder(x->left);
        printf(" %d ",x->data);
        inorder(x->right);
    }
}
void preorder(node *x)
{
    if(x!=NULL)
    {
        preorder(x->left);
        preorder(x->right);
        printf(" %d ",x->data);
    }
}

void postorder(node *x)
{
    if(x!=NULL)
    {
          printf(" %d",x->data);
          postorder(x->left);
          postorder(x->right);
    }
}



void main()
{
    int ch,ele,n,i;
    head x;
    x.root=NULL;
    printf("Enter no of nodes initially\n");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        printf("\nenter the element number %d : ",i+1);
        scanf("%d",&ele);
        insert(&x,ele);
    }
    while(1)
    {
        printf("\nEnter your choice\n 1:insert 2:delete 3:search 4:inorder 5:preorder 6:postorder 7:exit\n");
        scanf("%d",&ch);
        if(ch==7)
            break;
        switch(ch)
        {
            case 1: printf("enter the element to be inserted\n");
                    scanf("%d",&ele);
                    insert(&x,ele);
                    inorder(x.root);
                    break;
            case 2: printf("enter the element to be deleted\n");
                    scanf("%d",&ele);
                    delete1(&x,ele);
                    inorder(x.root);
                    break;

            case 3: printf("enter the element to be searched\n");
                    scanf("%d",&ele);
                    if(search(&x,ele))
                    {
                        printf("element found\n");
                        printf("%d is present\n",ele);

                    }
                    else
                    {
                        printf("%d is not found",ele);
                    }
                    break;
            case 4: inorder(x.root);
                    break;

            case 5: preorder(x.root);
                    break;

            case 6: postorder(x.root);
                    break;
            default:printf("Invalid choice\n");
        }

    }
}
