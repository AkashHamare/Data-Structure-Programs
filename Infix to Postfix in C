#include<stdio.h>
#define MAX 50
typedef struct stack
{
  char s[MAX];
  int tos;
}stack;

void push(stack*t,char ele)
{
  t->s[++t->tos]=ele;
}

int isempty(stack*t)
{
  return(t->tos==-1);
}

char pop(stack *t)
{
  t->tos--;
  return(t->s[t->tos+1]);
}

char stacktop(stack*t)
{
  return(t->s[t->tos]);
}

int isoperand(char ch)
{
  return(ch>= 'A' && ch<= 'Z' || ch>= 'a' && ch<='z');
}

int ipr(char ch)
{
  switch(ch)
  {
    case '+':
    case '-':return 1;
    case '*':
    case '/':
    case '%':return 2;
    case '(':return 3;
  }
  return -1;
}

int rpr(char ch)
{
  switch(ch)
  {
    case '+':
    case '-':return 1;
    case '*':
    case '/':
    case '%':return 2;
    case '(':return 0;
  }
  return -1;
}

void convert(char in[],char post[])
{
  int i,l=strlen(in),k=0;
  char ele;
  stack x;
  x.tos=-1;
  for(i=0;i<l;i++)
  {
    if(in[i]=='(')
        push(&x,in[i]);
    else if(in[i]==')')
          {
            while(1)
            {
              ele=pop(&x);
              if(ele=='(')
              break;
              post[k++]=ele;
            }
          }
    else if(isoperand(in[i]))
            post[k++]=in[i];
    else if(isempty(&x))
            push(&x,in[i]);
    else if(ipr(in[i])>rpr(stacktop(&x)))
            push(&x,in[i]);
         else
          {
            while(isempty(&x)==0 && ipr(in[i])<=rpr(stacktop(&x)))
            {
              ele=pop(&x);
              post[k++]=ele;
            }
            push(&x,in[i]);
          }
          }
    while(isempty(&x)==0)
      {
      ele=pop(&x);
      post[k++]=ele;
      }
    post[k]='\0';
}

void main()
{
char infix[MAX],postfix[MAX];
printf ("enter an infix expression:\n");
gets(infix);
convert(infix,postfix);
printf("postfix expression =%s",postfix);
}
